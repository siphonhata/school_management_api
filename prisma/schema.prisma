generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  firstName      String?    @db.VarChar(255)
  lastName       String?    @db.VarChar(255)
  idNumber       String?   @db.VarChar(255)
  dateOfBirth     String?   @db.VarChar(20)
  gender         String?   @db.VarChar(10)
  email          String    @unique @db.VarChar(255)
  phoneNumber    String?   @db.VarChar(20)
  address        Address?  @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addressId      String?   @db.VarChar(36)
  role           UserRole  @default(STUDENT)
  password       String    @db.VarChar(255)
  bio            String?
  profilePicture Bytes?
  parent         Parent[]
  students       Student[]
  teacher        Teacher[]
  school         School?   @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId       String?   @db.VarChar(36)
  status     UserStatus  @default(UNVERIFIED)
}

enum UserStatus {
  UNVERIFIED
  ACTIVE
  INACTIVE
}

model Address {
  id            String  @id @default(uuid())
  address       String?
  city          String?
  stateProvince String?
  country       String?
  postalCode    String?
  faxNumber     String?
  User          User[]
}

model School {
  id                        String                    @id @default(uuid())
  name                      String
  email                     String?                   @unique
  phoneNumber               String?
  website                   String?
  missionStatement          String?
  totalStudents             Int?
  enrollmentCapacity        Int?
  extracurricularActivities ExtracurricularActivity[] // Added association with extracurricular activities
  staffCount                Int?
  logo                      Bytes?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  classrooms                Classroom[]
  students                  Student[]
  parents                   Parent[]
  teachers                  Teacher[]
  User                      User[]
}

model Classroom {
  id          String    @id @default(uuid())
  classNumber String?   @db.VarChar(10)
  grade       Int?
  students    Student[]
  teacher     Teacher[]
  school      School?   @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId    String?   @db.VarChar(36)
  subjects    Subject[]
}

model Student {
  id                        String                    @id @default(uuid())
  userId                    String?                   @db.VarChar(36)
  extracurricularActivities ExtracurricularActivity[] // Updated to represent many-to-many relationship
  parent                    Parent[]
  classroom                 Classroom?                @relation(fields: [classroomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classroomId               String?                   @db.VarChar(36)
  school                    School?                   @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId                  String?                   @db.VarChar(36)
  user                      User?                     @relation(fields: [userId], references: [id])
}

model Parent {
  id        String   @id @default(uuid())
  userId    String?  @db.VarChar(36)
  studentId String?  @db.VarChar(36)
  students  Student? @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school    School?  @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId  String?  @db.VarChar(36)
}

model Teacher {
  id          String     @id @default(uuid())
  userId      String?    @db.VarChar(36)
  classroomId String?    @db.VarChar(36)
  subjectId   String?    @db.VarChar(36)
  classroom   Classroom? @relation(fields: [classroomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject     Subject?   @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       User?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school      School?    @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId    String?    @db.VarChar(36)
}

model ExtracurricularActivity {
  id           String    @id @default(uuid())
  activityName String?   @db.VarChar(255)
  teacher      String?   @db.VarChar(255)
  description  String?
  startDate    DateTime? @db.Date
  endDate      DateTime? @db.Date
  school       School?   @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolId     String?   @db.VarChar(36)
  students     Student[] // Updated to represent many-to-many relationship
}

model Subject {
  id          String     @id @default(uuid())
  subjectName String?    @db.VarChar(255)
  teacher     Teacher[]
  classroom   Classroom? @relation(fields: [classroomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classroomId String?    @db.VarChar(36)
}


model Otp {
  id              String      @id @default(uuid())
  email           String
  code            String
  createdAt       DateTime @default(now())
  expiresAt       DateTime
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
}
